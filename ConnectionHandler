
import java.net.*;  
import java.io.*;

public class ConnectionHandler extends Thread
{
	private Socket clientSocket = null;				// Client socket object
	private ObjectInputStream is = null;			// Input stream
	private ObjectOutputStream os = null;			// Output stream
	private DateTimeService time;
	private float[] tab = new float[2] ;
	private Temperature temp = new Temperature();
	TheLoop serverloop ;

	// The constructor for the connection handler
	public ConnectionHandler(Socket clientSocket,DateTimeService time, float [] tab) {
		this.tab=tab;
		this.clientSocket = clientSocket;
		this.time=time;
	}

	// Thread method
	public void run() {
		try {
			this.is = new ObjectInputStream(clientSocket.getInputStream());
			this.os = new ObjectOutputStream(clientSocket.getOutputStream());
			while (this.readCommand()) {}

		} 
		catch (IOException e)
		{
			System.out.println("XX. There was a problem with the Input/Output Communication:");
			e.printStackTrace();
		}
	}

	// Receive and process incoming string commands from client socket 
	private boolean readCommand() {

		DataSample dataserver = null;        

		try {
			dataserver = (DataSample) is.readObject();   

		} 
		catch (Exception e){    // catch a general exception

			this.closeSocket();
			return false;
		}

		System.out.println("01. <- Received an object from the client , the command is: " + dataserver.gettheDatacommand());



		switch(dataserver.gettheDatacommand())
		{

		case "GetTemp" :        	

			System.out.println(dataserver.gettheDatacommand());

			dataserver.setTemperature(temp.getTemp());
			dataserver.setTimeAndDate(time.getDateAndTime()); 


			this.send(dataserver);        	
			break;    

		case "GetTrigger" :

			System.out.println(dataserver.gettheDatacommand());

			dataserver.setlow_trigger(tab[0]);  
			dataserver.sethigh_trigger(tab[1]);  
			dataserver.setTemperature(temp.getTemp()); 
			this.send(dataserver);   

			break;

		case  "SetTrigger"	:
		
			System.out.println(dataserver.gettheDatacommand());

			tab[0]= dataserver.getlow_trigger() ;
			tab[1]= dataserver.gethigh_trigger() ;
			this.send(dataserver);  
		


		default: this.sendError("Invalid command: " + dataserver); 

		}
		
		serverloop= new TheLoop(dataserver, tab);
		serverloop.start();

		return true;

	}


	// Send a generic object back to the client 
	private void send(Object o) {
		try {
			System.out.println("02. -> Sending (" + o +") to the client.");
			this.os.writeObject(o);           
			this.os.flush();
			System.out.println("Object send");
		} 
		catch (Exception e) {
			System.out.println("XX." + e.getStackTrace());
		}
	}

	// Send a pre-formatted error message to the client 
	public void sendError(String message) { 
		this.send("Error:" + message);	//remember a String IS-A Object!
	}

	// Close the client socket 
	public void closeSocket() { //gracefully close the socket connection
		try {
			this.os.close();
			this.is.close();
			this.clientSocket.close();
		} 
		catch (Exception e) {
			System.out.println("XX. " + e.getStackTrace());
		}
	}
}
