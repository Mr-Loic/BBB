
import java.math.BigDecimal;
import java.math.RoundingMode; 
import java.net.*;  
import java.io.*;

import javax.swing.*; 
import javax.swing.border.EmptyBorder;

import java.awt.*; 
import java.awt.event.*;


@SuppressWarnings("serial")
public class Client extends JFrame implements ActionListener, WindowListener  {	

	//Graphic components
	//So the first case of the first component is the low trigger, the second is the high
	//Then the second component is another set of low and high triggers
	private float[] triggers  ;
	private JButton button_connect, pop_up, information, refresh, getTemp, setTriggers;
	private JButton automeasure, stop ;
	private JTextField text1_1, text1_2;
	private JTextField text2_1, text2_2;
	private JTextField text4_1 ;
	private JPanel panel1, panel2, panel3, panel4 ;	
	private JLabel label1_1, label1_2 ;
	private JLabel label2_1, label2_2, label2_3 ;
	private JLabel[] label3_1;
	private JLabel label4_1, label4_2;
	private DataSample[] arraydata;
	private JProgressBar[] progressbar;

	//.net components
	private static int portNumber = 5050;
	private Socket socket = null;
	private ObjectOutputStream os = null;
	private ObjectInputStream is = null;
	private DataSample data ;  
	private TheLoopClient listenloop;

	//Constructor
	public Client() {
		//Call the parent class constructor and set the name of the frame
		super("Client Swing Application");

		arraydata = new DataSample[10];
		triggers = new float[2] ;
		data= new DataSample();

		//Panels
		panel1 = new JPanel(new GridLayout(4,2));    	
		panel2 = new JPanel(new GridLayout(4,2));
		panel3 = new JPanel(new GridLayout(1,12));
		panel4 = new JPanel();

		//Settings Panel1
		this.label1_1 = new JLabel("IP Adresse:");
		this.text1_1 = new JTextField("192.168.7.2",10);
		this.text1_1.setEditable(false);
		this.label1_2 = new JLabel("Port Number:");
		this.text1_2  = new JTextField("5050",10);
		this.text1_2.setEditable(false);
		this.pop_up = new JButton("Change settings");
		this.button_connect = new JButton("Connect");


		//Triggers Panel2
		this.label2_1 = new JLabel("Actual Low Trigger:") ;
		this.text2_1 = new JTextField("0",10);
		this.label2_2 = new JLabel("Actual High Trigger:") ;
		this.text2_2 = new JTextField("100",10);
		this.label2_3 = new JLabel("Temperature not recorded yet") ;    	
		this.label2_3.setOpaque(false);
		this.getTemp = new JButton("Instant Temperature");
		label2_3.setFont(new Font("", Font.HANGING_BASELINE , 15));
		label2_3.setForeground(Color.RED);
		this.setTriggers = new JButton("Set Triggers");

		//Historical Panel3
		this.progressbar = new JProgressBar[10];
		this.label3_1= new JLabel[10];
		for(int i=0 ; i<10 ; i++){
			this.progressbar[i]=new JProgressBar(JProgressBar.VERTICAL,-60,60) ;
			this.label3_1[i]= new JLabel(" 0 ") ;
		}   

		this.refresh = new JButton("Refresh");


		//Time Steps Panel4
		this.label4_1= new JLabel("Set Up the time:") ;
		this.text4_1 = new JTextField("1",10);
		text4_1.setFont(new Font("", Font.HANGING_BASELINE , 25));
		this.information = new JButton("Information");
		this.automeasure = new JButton("Activate auto mode");
		this.stop = new JButton("Stop") ;
		this.label4_2= new JLabel("Time from Last measure") ;



		//    	String IP = JOptionPane.showInputDialog(this, "What IP adress?", 
		//				"IP adress", JOptionPane.QUESTION_MESSAGE);
		//		String Port = JOptionPane.showInputDialog(this, "What Port number?", 
		//				"IP adress", JOptionPane.QUESTION_MESSAGE);   
		//		
		//		text1_1.setText(IP);
		//		text1_2.setText(Port);

		//Adding the components of panel1
		panel1.add(new JScrollPane(label1_1)) ;
		panel1.add(new JScrollPane(text1_1));
		panel1.add(new JScrollPane(label1_2)) ;
		panel1.add(new JScrollPane(text1_2));
		panel1.add(new JScrollPane(pop_up));
		panel1.add(new JScrollPane(button_connect));    	

		//Adding the components of panel2
		panel2.add(new JScrollPane(label2_1));
		panel2.add(new JScrollPane(text2_1));
		panel2.add(new JScrollPane(label2_2));
		panel2.add(new JScrollPane(text2_2));
		panel2.add(new JScrollPane(label2_3));
		panel2.add(new JScrollPane(getTemp)); 
		panel2.add(new JScrollPane(setTriggers)); 

		//Adding the components of panel3    	
		panel3.add(new JScrollPane (refresh));
		for(int n=0 ;n<10 ; n++){
			panel3.add(new JScrollPane(label3_1[n])) ;
			panel3.add(new JScrollPane(progressbar[n]));    		
		}


		//Adding the components of panel4
		panel4.add(new JScrollPane(label4_1));
		panel4.add(new JScrollPane(text4_1));
		panel4.add(new JScrollPane(information));
		panel4.add(new JScrollPane(automeasure));
		panel4.add(new JScrollPane(stop));
		panel4.add(new JScrollPane(label4_2));

		this.button_connect.addActionListener(this);
		this.pop_up.addActionListener(this);
		this.information.addActionListener(this);
		this.automeasure.addActionListener(this);
		this.refresh.addActionListener(this);
		this.getTemp.addActionListener(this);
		this.stop.addActionListener(this);
		this.setTriggers.addActionListener(this);

		JTabbedPane tabbedPane = new JTabbedPane();
		tabbedPane.addTab("Settings", panel1);
		tabbedPane.addTab("Triggers", panel2);
		tabbedPane.addTab("Historical", panel3);
		tabbedPane.addTab("Time regulation", panel4);

		this.getContentPane().add("Center", tabbedPane);		

		this.pack();
		this.setVisible(true);
	}

	public void actionPerformed(ActionEvent e) {


		if(e.getSource().equals(getTemp))
		{
			this.data.setCommand("GetTemp");
			data=this.getCommand(data); 

			this.data.setTemperature(data.temp);

			this.label2_3.setText(Float.toString(data.getTemperature())+"째C") ; 
		}

		if(e.getSource().equals(refresh))
		{
			
			
			int stat=listenloop.countelem ;
			
			if (stat>=10) { stat=10;}
			this.uptdate_labels(stat);
			this.update_progressbar(stat);   	
			this.update_date(stat);
			
		}

		if(e.getSource().equals(information))
		{
			JOptionPane.showMessageDialog(this, "Setting up a time in seconds which determine the time step between an automatical temperature measure", "Information", JOptionPane.INFORMATION_MESSAGE);
		}

		if(e.getSource().equals(automeasure))
		{    		

			try {
				int time =  Integer.parseInt(text4_1.getText()); 

				listenloop = new TheLoopClient(time, this);

				listenloop.start();
				

			}
			catch (Exception f) {

				System.out.println(" Exception: " + f.toString());	
			}
			getTemp.setEnabled(false);
		}    		     		

		if(e.getSource().equals(stop))
		{
			listenloop.bool=false;
			getTemp.setEnabled(true);

		}

		if(e.getSource().equals(pop_up))
		{
			//Here YES is choice=0, NO choice=1 , cancel choice=2
			int choice =JOptionPane.showConfirmDialog(this, "Are you sure?", "Settings", JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.INFORMATION_MESSAGE);

			if(choice==0)
			{
				String IP = JOptionPane.showInputDialog(this, "What new IP adress?", 
						"IP adress", JOptionPane.QUESTION_MESSAGE);
				String Port = JOptionPane.showInputDialog(this, "What new Port number?", 
						"IP adress", JOptionPane.QUESTION_MESSAGE);   

				text1_1.setText(IP);
				text1_2.setText(Port);
				JOptionPane.showMessageDialog(this, "Change has been made", "Settings", JOptionPane.INFORMATION_MESSAGE);
			}

			if(choice==1)
			{
				JOptionPane.showMessageDialog(this, "No change has been made", "Settings", JOptionPane.INFORMATION_MESSAGE);
			}  


		}

		if(e.getSource().equals(setTriggers))
		{
			if (data.getTemperature()>Float.parseFloat(text2_2.getText())||data.getTemperature()<Float.parseFloat(text2_1.getText()))
			{

				JOptionPane.showMessageDialog(this, "Trigger Problem", "Error", JOptionPane.INFORMATION_MESSAGE);
			}

			data.setlow_trigger(Float.parseFloat(text2_1.getText()));
			data.sethigh_trigger(Float.parseFloat(text2_2.getText()));

			data.setCommand("SetTrigger");    		
			data=this.getCommand(data);
		}

		if(e.getSource().equals(button_connect))
		{
			button_connect.setEnabled(false);
			pop_up.setEnabled(false);

			data.setIP(text1_1.getText());

			if (!connectToServer(data)) {
				System.out.println("XX. Failed to open socket connection to: " + data.getServerIP());  

			} 
			data.setCommand("GetTrigger");
			data=this.getCommand(data);

			//Update the triggers of the servers
			this.text2_1.setText(""+data.getlow_trigger());
			this.text2_2.setText(""+data.gethigh_trigger());
			//Get the initial temperature	
			this.data.setTemperature(data.temp);    		
			this.label2_3.setText(Float.toString(data.getTemperature())+"째C") ; 

		}   	

	}

	private void update_progressbar(int element)
	{

		for(int i=0 ; i<element ; i++){
			this.progressbar[i].setValue((int)arraydata[i].getTemperature());
			System.out.println("The loop temp equals:"+(int)arraydata[i].getTemperature()+"\n the element is " +element);
			;
			//Setting the temperature on the label2 each time we refresh
			this.label2_3.setText(arraydata[i].getTemperature()+"째C") ;
		} 


	}

	private void uptdate_labels (int element)
	{
		for(int i=0 ; i<element ; i++){

			BigDecimal value = new BigDecimal ((arraydata[i].getTemperature() ));
			value = value.setScale(2, RoundingMode.HALF_EVEN); 
			this.label3_1[i].setText(""+value+"C째") ;
			System.out.println("the text in label is :"+label3_1[i].getText());
			
		}
	}
	
	private void update_date(int element)
	{
		for (int i=0 ; i<element; i++)
		{
			this.label4_2.setText(arraydata[i].getTimeAndDate());
		}
		
	}

	private boolean connectToServer(DataSample data) {
		try {     		

			// open a new socket to the server 

			this.socket = new Socket(data.getServerIP(),portNumber);

			this.os = new ObjectOutputStream((this.socket.getOutputStream()));
			this.is = new ObjectInputStream(this.socket.getInputStream());
			System.out.println("00. -> Connected to Server:" + this.socket.getInetAddress() 
					+ " on port: " + this.socket.getPort());
			System.out.println("    -> from local address: " + this.socket.getLocalAddress() 
					+ " and port: " + this.socket.getLocalPort());
		} 
		catch (Exception e) {
			System.out.println("XX. Failed to Connect to the Server at port: " + portNumber);
			System.out.println("    Exception: " + e.toString());	
			return false;
		}

		return true;
	}

	public DataSample getCommand(DataSample data) {


		System.out.println("01. -> Sending Command  "+data.gettheDatacommand()+" to the server...");

		//infinite loop that always check for the triggers
		//listen.Infinite(Float.parseFloat(data.low_trigger),Float.parseFloat(data.high_trigger));
		this.send(data);
		try{

			data = (DataSample) receive();

		}
		catch (Exception e){
			System.out.println("XX. There was an invalid object sent back from the server");
		}

		return data;
	}

	// method to send a generic object.
	private void send(Object data) {
		try {

			System.out.println("02. -> Sending an object...");

			os.writeObject(data);	

			os.flush();

		} 
		catch (Exception e) {
			System.out.println("XX. Exception Occurred on Sending:" +  e.toString());
		}
	}

	// method to receive a generic object.
	private Object receive() 
	{
		Object o = null;
		try {
			System.out.println("03. -- About to receive an object...");
			o = is.readObject();
			System.out.println("04. <- Object received...");

		} 
		catch (Exception e) {
			System.out.println("XX. Exception Occurred on Receiving:" + e.toString());
		}
		return o;
	}


	public static void main(String args[]) 
	{
		System.out.println("**. Java Client Application - EE402 OOP Module, DCU");

		//Create the object data DataSample with the arguments received
		//DataSample data = new DataSample(args[0],args[1],args[2]) ;
		//Launch the application with the object data

		System.out.println("Creating the graphical application");

		new Client();

		//    		System.out.println("Error: you must provide the address of the server");
		//    		System.out.println("Usage is:  java Client x.x.x.x  low_trigger high_trigger (e.g. java Client 192.168.7.2 0 15)");
		//    		System.out.println("      or:  java Client hostname low_trigger high_trigger(e.g. java Client localhost 0 15)");

		System.out.println("**. End of Application.");

	}

	public DataSample[] getarray()
	{
		return this.arraydata;
	}

	public DataSample getelementofarray(int n)
	{
		if(n>=10){n=9;}
		return this.arraydata[n];
	}

	public void setarray (int i, DataSample data)
	{
		this.arraydata[i]= data;
	}
	
	public void display()
	{
		for (int i=0 ;i<arraydata.length;i++)	
		{
			System.out.println("Temperature number "+i+" equals "+arraydata[i].getTemperature());
		}
	}
	@Override
	public void windowActivated(WindowEvent arg0) {


	}

	@Override
	public void windowClosed(WindowEvent arg0) { 


	}

	@Override
	public void windowClosing(WindowEvent arg0) { 
		System.exit(0);

	}

	@Override
	public void windowDeactivated(WindowEvent arg0) {


	}

	@Override
	public void windowDeiconified(WindowEvent arg0) {


	}

	@Override
	public void windowIconified(WindowEvent arg0) {


	}

	@Override
	public void windowOpened(WindowEvent arg0) {


	}
}
