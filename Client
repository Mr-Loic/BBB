
import java.net.*; 
import java.io.*;


public class Client  {
	
	
	
	private static int portNumber = 5050;
    private Socket socket = null;
    private ObjectOutputStream os = null;
    private ObjectInputStream is = null;
    private DataSample data ;
    
    

	// the constructor expects the IP address of the server - the port is fixed
    public Client(DataSample data) {
    	this.data=data;
    	if (!connectToServer(data)) {
    		System.out.println("XX. Failed to open socket connection to: " + data.getServerIP());            
    	}
    }

    private boolean connectToServer(DataSample data) {
    	try { 
    		
    		
    		// open a new socket to the server 
    		this.socket = new Socket(data.getServerIP(),portNumber);
    		
    		this.os = new ObjectOutputStream((this.socket.getOutputStream()));
    		this.is = new ObjectInputStream(this.socket.getInputStream());
    		System.out.println("00. -> Connected to Server:" + this.socket.getInetAddress() 
    				+ " on port: " + this.socket.getPort());
    		System.out.println("    -> from local address: " + this.socket.getLocalAddress() 
    				+ " and port: " + this.socket.getLocalPort());
    	} 
        catch (Exception e) {
        	System.out.println("XX. Failed to Connect to the Server at port: " + portNumber);
        	System.out.println("    Exception: " + e.toString());	
        	return false;
        }
		return true;
    }

    private void getDate() {
    	String theDateAndTime;
    	
    	System.out.println("01. -> Sending Command  "+data.gettheDatacommand()+" to the server...");
    	
    	this.send(data);
    	try{
    		theDateAndTime = (String) receive();
    		System.out.println("05. <- The Server responded with: ");
    		System.out.println("    <- " + theDateAndTime);
    	}
    	catch (Exception e){
    		System.out.println("XX. There was an invalid object sent back from the server");
    	}
    	System.out.println("06. -- Disconnected from Server.");
    }
	
    // method to send a generic object.
    private void send(Object data) {
		try {
			
		    System.out.println("02. -> Sending an object...");

		    os.writeObject(data);	
		   
		    os.flush();
		    
		} 
	    catch (Exception e) {
		    System.out.println("XX. Exception Occurred on Sending:" +  e.toString());
		}
    }

    // method to receive a generic object.
    private Object receive() 
    {
		Object o = null;
		try {
			System.out.println("03. -- About to receive an object...");
		    o = is.readObject();
		    System.out.println("04. <- Object received...");
		} 
	    catch (Exception e) {
		    System.out.println("XX. Exception Occurred on Receiving:" + e.toString());
		}
		return o;
    }

    public static void main(String args[]) 
    {
    	System.out.println("**. Java Client Application - EE402 OOP Module, DCU");
    	if (args[1]==null || args[2]==null) { args[1]="10"; args[2]="55";}
    	if(args.length==3){
    		
    		if (args[1]==null || args[2]==null) { args[1]="10"; args[2]="55";}
    		
    		//Create the object data DataSample with the arguments received
    		DataSample data = new DataSample(args[0],args[1],args[2]) ;
    		//Launch the application with the object data
    		Client theApp = new Client(data);
		    theApp.getDate();
		}
    	else
    	{
    		System.out.println("Error: you must provide the address of the server");
    		System.out.println("Usage is:  java Client x.x.x.x  (e.g. java Client 192.168.7.2)");
    		System.out.println("      or:  java Client hostname (e.g. java Client localhost)");
    	}    
    	System.out.println("**. End of Application.");
    }
}
